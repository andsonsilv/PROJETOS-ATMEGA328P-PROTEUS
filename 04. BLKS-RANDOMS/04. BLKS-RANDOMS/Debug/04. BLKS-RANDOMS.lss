
04. BLKS-RANDOMS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006dc  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000657  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000295  00000000  00000000  00000fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000381  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a5  00000000  00000000  00001665  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000180a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_4>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	57 00       	.word	0x0057	; ????
  6a:	5a 00       	.word	0x005a	; ????
  6c:	5d 00       	.word	0x005d	; ????
  6e:	60 00       	.word	0x0060	; ????
  70:	63 00       	.word	0x0063	; ????
  72:	66 00       	.word	0x0066	; ????
  74:	69 00       	.word	0x0069	; ????

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  96:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <randomico>:
#define  SWITCH_PRESSED !(PINC & (1<<PINC0))

unsigned int aux = 0;

void randomico(unsigned int numero){
	switch(numero){
  9e:	87 30       	cpi	r24, 0x07	; 7
  a0:	91 05       	cpc	r25, r1
  a2:	c8 f4       	brcc	.+50     	; 0xd6 <randomico+0x38>
  a4:	fc 01       	movw	r30, r24
  a6:	ec 5c       	subi	r30, 0xCC	; 204
  a8:	ff 4f       	sbci	r31, 0xFF	; 255
  aa:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__tablejump2__>
		
		case 0:
		PORTB = 0b00000010;
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	85 b9       	out	0x05, r24	; 5
		break;
  b2:	08 95       	ret
		case 1:
		PORTB = 0b00000110;
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	85 b9       	out	0x05, r24	; 5
		break;
  b8:	08 95       	ret
		case 2:
		PORTB = 0b00001110;
  ba:	8e e0       	ldi	r24, 0x0E	; 14
  bc:	85 b9       	out	0x05, r24	; 5
		break;
  be:	08 95       	ret
		case 3:
		PORTB = 0b00011110;
  c0:	8e e1       	ldi	r24, 0x1E	; 30
  c2:	85 b9       	out	0x05, r24	; 5
		break;
  c4:	08 95       	ret
		case 4:
		PORTB = 0b00111110;
  c6:	8e e3       	ldi	r24, 0x3E	; 62
  c8:	85 b9       	out	0x05, r24	; 5
		break;
  ca:	08 95       	ret
		case 5:
		PORTB = 0b01111110;
  cc:	8e e7       	ldi	r24, 0x7E	; 126
  ce:	85 b9       	out	0x05, r24	; 5
		break;
  d0:	08 95       	ret
		case 6:
		PORTB = 0b11111110;
  d2:	8e ef       	ldi	r24, 0xFE	; 254
  d4:	85 b9       	out	0x05, r24	; 5
  d6:	08 95       	ret

000000d8 <__vector_4>:
		break;
		
	}
}

ISR(PCINT1_vect){
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	2f 93       	push	r18
  e4:	3f 93       	push	r19
  e6:	4f 93       	push	r20
  e8:	5f 93       	push	r21
  ea:	6f 93       	push	r22
  ec:	7f 93       	push	r23
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
  f2:	af 93       	push	r26
  f4:	bf 93       	push	r27
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
	
	if(SWITCH_PRESSED) randomico(aux);
  fa:	30 99       	sbic	0x06, 0	; 6
  fc:	06 c0       	rjmp	.+12     	; 0x10a <__vector_4+0x32>
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 102:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 106:	0e 94 4f 00 	call	0x9e	; 0x9e <randomico>
	
}
 10a:	ff 91       	pop	r31
 10c:	ef 91       	pop	r30
 10e:	bf 91       	pop	r27
 110:	af 91       	pop	r26
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	7f 91       	pop	r23
 118:	6f 91       	pop	r22
 11a:	5f 91       	pop	r21
 11c:	4f 91       	pop	r20
 11e:	3f 91       	pop	r19
 120:	2f 91       	pop	r18
 122:	0f 90       	pop	r0
 124:	0f be       	out	0x3f, r0	; 63
 126:	0f 90       	pop	r0
 128:	1f 90       	pop	r1
 12a:	18 95       	reti

0000012c <main>:

int main(void){
	
	/* Replace with your application code */
	
	DDRB = 0b11111111;
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	84 b9       	out	0x04, r24	; 4
	DDRC &= ~(1<<PORTC0);
 130:	38 98       	cbi	0x07, 0	; 7
	
	PCMSK1 |= (1<<PCINT8);
 132:	ec e6       	ldi	r30, 0x6C	; 108
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);
 13c:	e8 e6       	ldi	r30, 0x68	; 104
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
	
	sei();
 146:	78 94       	sei
	
	while(1){
		
		PORTC |= (1<<PORTC0);
 148:	40 9a       	sbi	0x08, 0	; 8
		
		aux++;
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if(aux == 6) aux = 0;
 15c:	06 97       	sbiw	r24, 0x06	; 6
 15e:	a1 f7       	brne	.-24     	; 0x148 <main+0x1c>
 160:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 168:	ef cf       	rjmp	.-34     	; 0x148 <main+0x1c>

0000016a <__tablejump2__>:
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	05 90       	lpm	r0, Z+
 170:	f4 91       	lpm	r31, Z
 172:	e0 2d       	mov	r30, r0
 174:	09 94       	ijmp

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
