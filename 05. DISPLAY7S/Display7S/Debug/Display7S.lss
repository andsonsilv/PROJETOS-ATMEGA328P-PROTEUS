
Display7S.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010a  0080010a  0000028e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000073a  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000658  00000000  00000000  00000a82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000158  00000000  00000000  00001825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000197d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_2>
   c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  9e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
	0b00000111, //7
	0b01111111, //8
	0b01101111, //9
};

ISR(INT0_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	aux++;
  b8:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
  bc:	ef 5f       	subi	r30, 0xFF	; 255
  be:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end>
	PORTC = DS7[aux%10];
  c2:	8d ec       	ldi	r24, 0xCD	; 205
  c4:	e8 9f       	mul	r30, r24
  c6:	81 2d       	mov	r24, r1
  c8:	11 24       	eor	r1, r1
  ca:	86 95       	lsr	r24
  cc:	86 95       	lsr	r24
  ce:	86 95       	lsr	r24
  d0:	88 0f       	add	r24, r24
  d2:	98 2f       	mov	r25, r24
  d4:	99 0f       	add	r25, r25
  d6:	99 0f       	add	r25, r25
  d8:	89 0f       	add	r24, r25
  da:	e8 1b       	sub	r30, r24
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	e0 50       	subi	r30, 0x00	; 0
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	80 81       	ld	r24, Z
  e4:	88 b9       	out	0x08, r24	; 8
}
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_2>:

ISR(INT1_vect){
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	aux--;
 10a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 10e:	e1 50       	subi	r30, 0x01	; 1
 110:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <__data_end>
	PORTC = DS7[aux%10];
 114:	8d ec       	ldi	r24, 0xCD	; 205
 116:	e8 9f       	mul	r30, r24
 118:	81 2d       	mov	r24, r1
 11a:	11 24       	eor	r1, r1
 11c:	86 95       	lsr	r24
 11e:	86 95       	lsr	r24
 120:	86 95       	lsr	r24
 122:	88 0f       	add	r24, r24
 124:	98 2f       	mov	r25, r24
 126:	99 0f       	add	r25, r25
 128:	99 0f       	add	r25, r25
 12a:	89 0f       	add	r24, r25
 12c:	e8 1b       	sub	r30, r24
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e0 50       	subi	r30, 0x00	; 0
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	80 81       	ld	r24, Z
 136:	88 b9       	out	0x08, r24	; 8
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_3>:

ISR(PCINT0_vect){
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
	if(PINB & 1)
 158:	18 9b       	sbis	0x03, 0	; 3
 15a:	04 c0       	rjmp	.+8      	; 0x164 <__vector_3+0x1a>
		PORTB ^= (1<<PORTB2);
 15c:	95 b1       	in	r25, 0x05	; 5
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	89 27       	eor	r24, r25
 162:	85 b9       	out	0x05, r24	; 5
}
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_5>:

ISR(PCINT2_vect){
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
	if(PIND & 1)
 180:	48 9b       	sbis	0x09, 0	; 9
 182:	04 c0       	rjmp	.+8      	; 0x18c <__vector_5+0x1a>
		PORTB ^= (1<<PORTB3);
 184:	95 b1       	in	r25, 0x05	; 5
 186:	88 e0       	ldi	r24, 0x08	; 8
 188:	89 27       	eor	r24, r25
 18a:	85 b9       	out	0x05, r24	; 5
}
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <setup_uc>:


void setup_uc(void){
	
	//SET all PORTB as output, except B0
	DDRB = 0xFE; 
 19a:	8e ef       	ldi	r24, 0xFE	; 254
 19c:	84 b9       	out	0x04, r24	; 4
	//SET B0 Pull UP
	PORTB = 0x01;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	85 b9       	out	0x05, r24	; 5
	
	//SET all PORTC as output
	DDRC  = 0xFF;
 1a2:	9f ef       	ldi	r25, 0xFF	; 255
 1a4:	97 b9       	out	0x07, r25	; 7
	PORTC = 0b00111111;		//initialize display with '0'
 1a6:	9f e3       	ldi	r25, 0x3F	; 63
 1a8:	98 b9       	out	0x08, r25	; 8
	
	//SET D0, D1, D2 and D3 as input, all others are output
	DDRD = 0xF0;
 1aa:	90 ef       	ldi	r25, 0xF0	; 240
 1ac:	9a b9       	out	0x0a, r25	; 10
	//SET D0, D1, D2 and D3 Pull UP
	PORTD = 0x0F;
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	9b b9       	out	0x0b, r25	; 11

	//Config INT0 and INT1 active on falling edge
	EICRA = 0b00001010;
 1b2:	9a e0       	ldi	r25, 0x0A	; 10
 1b4:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	//Enable INT0 and INT1
	EIMSK = 0x03;
 1b8:	93 e0       	ldi	r25, 0x03	; 3
 1ba:	9d bb       	out	0x1d, r25	; 29
		
		
	//Enable Pin Change INT[0] and Pin Change INT[2]
	//PCICR = 0b00000101;
	PCICR |= (1<<PCIE0);
 1bc:	e8 e6       	ldi	r30, 0x68	; 104
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	90 81       	ld	r25, Z
 1c2:	91 60       	ori	r25, 0x01	; 1
 1c4:	90 83       	st	Z, r25
	PCICR |= (1<<PCIE2);
 1c6:	90 81       	ld	r25, Z
 1c8:	94 60       	ori	r25, 0x04	; 4
 1ca:	90 83       	st	Z, r25
	
	/*Pin Change Interrupt MASK*/
	/*bits 23 to 16*/
	PCMSK2 = 0x01;
 1cc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
	/*bits 14 to 08*//*Doesnt exist PCINT15*/
	PCMSK1 = 0x00;
 1d0:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	/*bits 07 to 00*/
	PCMSK0 = 0x01;
 1d4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	
	//Turn on all interrupts
	sei();
 1d8:	78 94       	sei
 1da:	08 95       	ret

000001dc <main>:
	
}

int main(void){
    
	setup_uc();
 1dc:	0e 94 cd 00 	call	0x19a	; 0x19a <setup_uc>
    
	while(1){
	
	    if(PIND & (1<<1))
 1e0:	49 9b       	sbis	0x09, 1	; 9
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <main+0xc>
		    PORTB |= (1<<PORTB1);
 1e4:	29 9a       	sbi	0x05, 1	; 5
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <main+0x4>
	    else
		    PORTB &= ~(1<<PORTB1);
 1e8:	29 98       	cbi	0x05, 1	; 5
 1ea:	fa cf       	rjmp	.-12     	; 0x1e0 <main+0x4>

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
